Started GET "/" for ::1 at 2022-03-29 14:35:38 +0100
  [1m[35m (65.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by Rails::WelcomeController#index as HTML
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/railties-6.1.5/lib/rails/templates/rails/welcome/index.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/railties-6.1.5/lib/rails/templates/rails/welcome/index.html.erb (Duration: 42.7ms | Allocations: 395)
Completed 200 OK in 299ms (Views: 123.7ms | ActiveRecord: 0.0ms | Allocations: 3364)


Started GET "/favicon.ico" for ::1 at 2022-03-29 14:35:44 +0100
  
ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  
Started GET "/graphiql" for ::1 at 2022-03-29 14:43:08 +0100
  [1m[35m (1.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  
ActionController::RoutingError (No route matches [GET] "/graphiql"):
  
Started GET "/graphiql" for ::1 at 2022-03-29 14:51:37 +0100
  [1m[35m (2.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 4.0ms | Allocations: 523)
Completed 200 OK in 14ms (Views: 9.2ms | ActiveRecord: 0.0ms | Allocations: 3262)


Started GET "/stylesheets/graphiql/rails/application.css" for ::1 at 2022-03-29 14:51:37 +0100
  
ActionController::RoutingError (No route matches [GET] "/stylesheets/graphiql/rails/application.css"):
  
Started GET "/javascripts/graphiql/rails/application.js" for ::1 at 2022-03-29 14:51:37 +0100
  
ActionController::RoutingError (No route matches [GET] "/javascripts/graphiql/rails/application.js"):
  
Started GET "/graphiql" for ::1 at 2022-03-29 14:54:01 +0100
  [1m[35m (1.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 1284.9ms | Allocations: 21688)
Completed 200 OK in 1315ms (Views: 1299.9ms | ActiveRecord: 0.0ms | Allocations: 24424)


Started POST "/graphql" for ::1 at 2022-03-29 14:54:03 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 200 OK in 161ms (Views: 43.0ms | ActiveRecord: 0.0ms | Allocations: 19986)


  [1m[35m (0.7ms)[0m  [1m[34mSELECT pg_try_advisory_lock(7683625796253104145)[0m
  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateProducts (20220329135744)
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (479.8ms)[0m  [1m[35mCREATE TABLE "products" ("id" bigserial primary key, "title" character varying, "price" decimal, "description" character varying, "imageUrl" character varying, "country" character varying, "color" character varying, "material" character varying, "weight" character varying, "dimension" character varying, "category" character varying, "purpose" character varying, "quantity" integer, "created_at" timestamp(6) NOT NULL, "updated_at" timestamp(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.9ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20220329135744"]]
  [1m[36mTRANSACTION (21.4ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (48.5ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(7683625796253104145)[0m
  [1m[35m (1.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.3ms)[0m  [1m[34mSELECT pg_try_advisory_lock(7683625796253104145)[0m
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to DropTable (20220329140250)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (63.3ms)[0m  [1m[35mDROP TABLE "furnitures"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.8ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20220329140250"]]
  [1m[36mTRANSACTION (18.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[35m (0.5ms)[0m  [1m[34mSELECT pg_advisory_unlock(7683625796253104145)[0m
  [1m[35m (2.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started GET "/rails/info/routes" for ::1 at 2022-03-29 15:08:28 +0100
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by Rails::InfoController#routes as HTML
  Rendering layout /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/railties-6.1.5/lib/rails/templates/layouts/application.html.erb
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/railties-6.1.5/lib/rails/templates/rails/info/routes.html.erb within layouts/application
  Rendered collection of /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/actionpack-6.1.5/lib/action_dispatch/middleware/templates/routes/_route.html.erb [26 times] (Duration: 11.4ms | Allocations: 3048)
  Rendered collection of /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/actionpack-6.1.5/lib/action_dispatch/middleware/templates/routes/_route.html.erb [1 times] (Duration: 0.7ms | Allocations: 113)
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/actionpack-6.1.5/lib/action_dispatch/middleware/templates/routes/_table.html.erb (Duration: 2.0ms | Allocations: 862)
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/railties-6.1.5/lib/rails/templates/rails/info/routes.html.erb within layouts/application (Duration: 33.5ms | Allocations: 7512)
  Rendered layout /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/railties-6.1.5/lib/rails/templates/layouts/application.html.erb (Duration: 46.3ms | Allocations: 7739)
Completed 200 OK in 66ms (Views: 48.7ms | ActiveRecord: 0.0ms | Allocations: 10073)


Started GET "/graphiql" for ::1 at 2022-03-29 15:08:51 +0100
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 63.9ms | Allocations: 5157)
Completed 200 OK in 71ms (Views: 68.6ms | ActiveRecord: 0.0ms | Allocations: 6557)


Started POST "/graphql" for ::1 at 2022-03-29 15:08:52 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 200 OK in 80ms (Views: 6.7ms | ActiveRecord: 0.0ms | Allocations: 19737)


  [1m[35m (0.2ms)[0m  [1m[34mSELECT pg_try_advisory_lock(7683625796253104145)[0m
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to ChangeColumn (20220329141443)
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35m (17.8ms)[0m  [1m[35mALTER TABLE "products" ALTER COLUMN "description" TYPE text[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.7ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ($1) RETURNING "version"[0m  [["version", "20220329141443"]]
  [1m[36mTRANSACTION (28.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = $1 LIMIT $2[0m  [["key", "environment"], ["LIMIT", 1]]
  [1m[35m (4.0ms)[0m  [1m[34mSELECT pg_advisory_unlock(7683625796253104145)[0m
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started GET "/graphiql" for ::1 at 2022-03-29 15:29:25 +0100
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 72.9ms | Allocations: 5250)
Completed 200 OK in 92ms (Views: 84.2ms | ActiveRecord: 0.0ms | Allocations: 7987)


Started POST "/graphql" for ::1 at 2022-03-29 15:29:26 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 200 OK in 89ms (Views: 7.6ms | ActiveRecord: 0.0ms | Allocations: 23980)


Started POST "/graphql" for ::1 at 2022-03-29 15:29:43 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    country,\n    material,\n    quantity\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    country,\n    material,\n    quantity\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.8ms)[0m  [1m[34mSELECT "products".* FROM "products"[0m
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.8ms | Allocations: 1674)


  [1m[35m (0.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (1.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.8ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mProduct Create (1.1ms)[0m  [1m[32mINSERT INTO "products" ("title", "price", "description", "imageUrl", "country", "color", "material", "weight", "dimension", "category", "purpose", "quantity", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING "id"[0m  [["title", "Desire Velvet Green Bed"], ["price", "413.55"], ["description", "This is an exquite bedroom bed primarily made for all"], ["imageUrl", "[\"https://cdn.hitme.ie/uploads/files/images/158/import/Bed-Desire-Velvet-Green.jpg\"]"], ["country", "Nigeria"], ["color", "[\"brown\"]"], ["material", "Hard wood, steel, fabric"], ["weight", "15 kg"], ["dimension", "80 x 55 x 35 cm"], ["category", "beds"], ["purpose", "bedroom"], ["quantity", 10], ["created_at", "2022-03-29 15:04:24.748629"], ["updated_at", "2022-03-29 15:04:24.748629"]]
  [1m[36mTRANSACTION (32.7ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mProduct Create (0.9ms)[0m  [1m[32mINSERT INTO "products" ("title", "price", "description", "imageUrl", "country", "color", "material", "weight", "dimension", "category", "purpose", "quantity", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING "id"[0m  [["title", "Dennis Storage Box"], ["price", "217.08"], ["description", "A tough easy storage chest in your living room or bedroom has always been easy. This hamper Dennis WOOOD Collections is made of brushed pine."], ["imageUrl", "[\"https://cdn.hitme.ie/uploads/files/images/158/import/8714713052608_2.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/8714713038527_2.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/8714713038527.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/8714713038152_4.jpg\"]"], ["country", "China"], ["color", "[\"concrete grey\"]"], ["material", "Pine brushed"], ["weight", "15 kg"], ["dimension", "95 x 42 x 42 cm"], ["category", "storage"], ["purpose", "kids"], ["quantity", 0], ["created_at", "2022-03-29 15:04:24.791391"], ["updated_at", "2022-03-29 15:04:24.791391"]]
  [1m[36mTRANSACTION (10.5ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mProduct Create (0.6ms)[0m  [1m[32mINSERT INTO "products" ("title", "price", "description", "imageUrl", "country", "color", "material", "weight", "dimension", "category", "purpose", "quantity", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING "id"[0m  [["title", "Cabaret Corner Sofa"], ["price", "1220.1003"], ["description", "A compact designer sofa as a corner solution for any living room - a modern classic! Just let yourself drop and lean back - that feels good"], ["imageUrl", "[\"https://cdn.hitme.ie/uploads/files/images/158/import/Corner-Sofa-Cabaret-Grey-Left85208_1.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Corner-Sofa-Cabaret-Grey-Right85207_1.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Corner-Sofa-Cabaret-Grey-Left85208_2.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Corner-Sofa-Cabaret-Grey-Right85207_2.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Corner-Sofa-Cabaret-Grey-Left85208_3.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Corner-Sofa-Cabaret-Grey-Right85207_3.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Corner-Sofa-Cabaret-Grey-Right85207_6.jpg\"]"], ["country", "Italy"], ["color", "[\"cream\"]"], ["material", "beech solid wood, 100 % polyester, stainless steel"], ["weight", "180 kg"], ["dimension", "290 x 167 x 88 cm"], ["category", "sofa"], ["purpose", "living room"], ["quantity", 8], ["created_at", "2022-03-29 15:04:24.811805"], ["updated_at", "2022-03-29 15:04:24.811805"]]
  [1m[36mTRANSACTION (12.1ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mProduct Create (0.6ms)[0m  [1m[32mINSERT INTO "products" ("title", "price", "description", "imageUrl", "country", "color", "material", "weight", "dimension", "category", "purpose", "quantity", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING "id"[0m  [["title", "Soft Snake Walnut Desk"], ["price", "940.55"], ["description", "An elegant desk ideal for the designer loft or the modern home office. Four drawers offer lots of storage space for all your writing utensils. Stylish handles made of chrome-plated steel add an elegant touch"], ["imageUrl", "[\"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-82993-master-a-700x700.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-82993-700x700.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-82993-master-30-700x700.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-82993-detail-d-700x700-1.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-82993-detail-a-700x700.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-82993-master-mood-a-700x700.jpg\"]"], ["country", "Hungary"], ["color", "[\"brown\"]"], ["material", "Hard wood, steel, fibreboard"], ["weight", "79 kg"], ["dimension", "150 x 70 x 76 cm"], ["category", "desks"], ["purpose", "office"], ["quantity", 55], ["created_at", "2022-03-29 15:04:24.833686"], ["updated_at", "2022-03-29 15:04:24.833686"]]
  [1m[36mTRANSACTION (2.6ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mProduct Create (0.8ms)[0m  [1m[32mINSERT INTO "products" ("title", "price", "description", "imageUrl", "country", "color", "material", "weight", "dimension", "category", "purpose", "quantity", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING "id"[0m  [["title", "Snadwich Stool"], ["price", "823.52"], ["description", "Fancy a quick makeover? With this velvet stool, every large or small apartment is immediately given a trendy, elegant touch. The colour combination of pink, blue, and grey and brass is beautiful, and this glamorous pouffe with its beautiful curves is also comfortably upholstered."], ["imageUrl", "[\"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-84965-Sandwich-Stool.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-84964-Sandwich-Stool.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/KARE-84965-detail-b-Sandwich-Stool.jpg\"]"], ["country", "United Kingdom"], ["color", "[\"brown\", \"mauve\", \"grey\"]"], ["material", "Polyester, steel lacquered, chipboard"], ["weight", "6 kg"], ["dimension", "42 x 42 x 48 cm"], ["category", "footstools & pouffes"], ["purpose", "dining"], ["quantity", 7], ["created_at", "2022-03-29 15:04:24.844875"], ["updated_at", "2022-03-29 15:04:24.844875"]]
  [1m[36mTRANSACTION (4.2ms)[0m  [1m[35mCOMMIT[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mProduct Create (0.8ms)[0m  [1m[32mINSERT INTO "products" ("title", "price", "description", "imageUrl", "country", "color", "material", "weight", "dimension", "category", "purpose", "quantity", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING "id"[0m  [["title", "Ibiza Hanging Chair"], ["price", "865.79"], ["description", "If you are longing for the Mediterranean on an ordinary Wednesday, the Ibiza rocking chair may be the solution. Now all that remains is to get the playlist right, serve the Rioja and your wanderlust will soon be forgotten."], ["imageUrl", "[\"https://cdn.hitme.ie/uploads/files/images/158/import/Hanging-Chair-Ibiza-Brown-83869_1.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Hanging-Chair-Ibiza-White-85591_1.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Hanging-Chair-Ibiza-Brown-83869_6.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Hanging-Chair-Ibiza-Brown-83869_7.jpg\", \"https://cdn.hitme.ie/uploads/files/images/158/import/Hanging-Chair-Ibiza-Brown-83869_5.jpg\"]"], ["country", "China"], ["color", "[\"brown\", \"mauve\", \"grey\"]"], ["material", "Polyester, steel lacquered, chipboard"], ["weight", "6 kg"], ["dimension", "42 x 42 x 48 cm"], ["category", "swings & hammocks"], ["purpose", "outdoor"], ["quantity", 32], ["created_at", "2022-03-29 15:04:24.855781"], ["updated_at", "2022-03-29 15:04:24.855781"]]
  [1m[36mTRANSACTION (4.5ms)[0m  [1m[35mCOMMIT[0m
Started GET "/graphiql" for ::1 at 2022-03-29 16:04:38 +0100
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 88.4ms | Allocations: 5263)
Completed 200 OK in 113ms (Views: 101.7ms | ActiveRecord: 0.0ms | Allocations: 8000)


Started POST "/graphql" for ::1 at 2022-03-29 16:04:38 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 200 OK in 103ms (Views: 6.8ms | ActiveRecord: 0.0ms | Allocations: 23905)


Started POST "/graphql" for ::1 at 2022-03-29 16:04:40 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    country,\n    material,\n    quantity\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    country,\n    material,\n    quantity\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.9ms)[0m  [1m[34mSELECT "products".* FROM "products"[0m
Completed 200 OK in 57ms (Views: 1.2ms | ActiveRecord: 12.3ms | Allocations: 9972)


Started POST "/graphql" for ::1 at 2022-03-29 16:05:14 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    imageUrl,\n    country,\n    material,\n    quantity\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    imageUrl,\n    country,\n    material,\n    quantity\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.6ms)[0m  [1m[34mSELECT "products".* FROM "products"[0m
Completed 200 OK in 15ms (Views: 1.6ms | ActiveRecord: 0.6ms | Allocations: 2291)


Started GET "/graphiql" for ::1 at 2022-03-29 16:11:01 +0100
  [1m[35m (2.9ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 88.2ms | Allocations: 5250)
Completed 200 OK in 117ms (Views: 104.2ms | ActiveRecord: 0.0ms | Allocations: 7987)


Started POST "/graphql" for ::1 at 2022-03-29 16:11:02 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 200 OK in 145ms (Views: 13.4ms | ActiveRecord: 0.0ms | Allocations: 24401)


Started POST "/graphql" for ::1 at 2022-03-29 16:11:56 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(purpose: \"living room\") {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(purpose: \"living room\") {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (1.5ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", nil], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Couldn't find Product with 'id'=living room
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-6.1.5/lib/active_record/core.rb:338:in `find'
/home/jamezjaz/GraphQL_Rails/GraphQL_Rails_Store/app/graphql/types/query_type.rb:21:in `product'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:650:in `public_send'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:650:in `block (2 levels) in resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:766:in `with_extensions'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:629:in `block in resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema.rb:1000:in `after_lazy'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:627:in `resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:502:in `block (3 levels) in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/tracing.rb:65:in `trace'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:501:in `block (2 levels) in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:806:in `call_method_on_directives'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:498:in `block in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:905:in `after_lazy'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:436:in `evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:429:in `block in evaluate_selection'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/member/has_arguments.rb:246:in `block (3 levels) in coerce_arguments'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/dataloader.rb:181:in `block in run'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/dataloader.rb:303:in `block in spawn_fiber'
Completed 500 Internal Server Error in 40ms (Views: 2.7ms | ActiveRecord: 10.4ms | Allocations: 4042)


Started POST "/graphql" for ::1 at 2022-03-29 16:12:13 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(purpose: \"living room\") {\n    # id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(purpose: \"living room\") {\n    # id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.4ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", nil], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Couldn't find Product with 'id'=living room
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-6.1.5/lib/active_record/core.rb:338:in `find'
/home/jamezjaz/GraphQL_Rails/GraphQL_Rails_Store/app/graphql/types/query_type.rb:21:in `product'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:650:in `public_send'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:650:in `block (2 levels) in resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:766:in `with_extensions'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:629:in `block in resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema.rb:1000:in `after_lazy'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:627:in `resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:502:in `block (3 levels) in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/tracing.rb:65:in `trace'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:501:in `block (2 levels) in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:806:in `call_method_on_directives'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:498:in `block in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:905:in `after_lazy'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:436:in `evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:429:in `block in evaluate_selection'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/member/has_arguments.rb:246:in `block (3 levels) in coerce_arguments'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/dataloader.rb:181:in `block in run'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/dataloader.rb:303:in `block in spawn_fiber'
Completed 500 Internal Server Error in 10ms (Views: 0.7ms | ActiveRecord: 0.4ms | Allocations: 1365)


Started GET "/graphiql" for ::1 at 2022-03-29 16:13:27 +0100
  [1m[35m (1.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 66.0ms | Allocations: 5263)
Completed 200 OK in 99ms (Views: 91.3ms | ActiveRecord: 0.0ms | Allocations: 8000)


Started POST "/graphql" for ::1 at 2022-03-29 16:13:28 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 200 OK in 97ms (Views: 6.8ms | ActiveRecord: 0.0ms | Allocations: 24401)


Started POST "/graphql" for ::1 at 2022-03-29 16:13:33 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 4) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 4) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.7ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", 4], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Completed 200 OK in 51ms (Views: 0.4ms | ActiveRecord: 7.3ms | Allocations: 9563)


Started POST "/graphql" for ::1 at 2022-03-29 16:13:42 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 1) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 1) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.5ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", 1], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Completed 200 OK in 13ms (Views: 0.8ms | ActiveRecord: 0.5ms | Allocations: 1340)


Started POST "/graphql" for ::1 at 2022-03-29 16:13:48 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.4ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 0.4ms | Allocations: 1340)


Started POST "/graphql" for ::1 at 2022-03-29 16:13:52 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 53) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 53) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.5ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", 53], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Couldn't find Product with 'id'=53
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-6.1.5/lib/active_record/core.rb:338:in `find'
/home/jamezjaz/GraphQL_Rails/GraphQL_Rails_Store/app/graphql/types/query_type.rb:21:in `product'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:650:in `public_send'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:650:in `block (2 levels) in resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:766:in `with_extensions'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:629:in `block in resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema.rb:1000:in `after_lazy'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/field.rb:627:in `resolve'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:502:in `block (3 levels) in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/tracing.rb:65:in `trace'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:501:in `block (2 levels) in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:806:in `call_method_on_directives'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:498:in `block in evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:905:in `after_lazy'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:436:in `evaluate_selection_with_args'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/execution/interpreter/runtime.rb:429:in `block in evaluate_selection'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/schema/member/has_arguments.rb:246:in `block (3 levels) in coerce_arguments'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/dataloader.rb:181:in `block in run'
/home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphql-2.0.5/lib/graphql/dataloader.rb:303:in `block in spawn_fiber'
Completed 500 Internal Server Error in 7ms (Views: 0.7ms | ActiveRecord: 0.5ms | Allocations: 1377)


Started POST "/graphql" for ::1 at 2022-03-29 16:13:56 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.6ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Completed 200 OK in 11ms (Views: 0.4ms | ActiveRecord: 0.6ms | Allocations: 1328)


Started GET "/graphiql" for ::1 at 2022-03-29 17:08:31 +0100
  [1m[35m (1.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by GraphiQL::Rails::EditorsController#show as HTML
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb
  Rendered /home/jamezjaz/.rbenv/versions/2.7.2/lib/ruby/gems/2.7.0/gems/graphiql-rails-1.8.0/app/views/graphiql/rails/editors/show.html.erb (Duration: 113.5ms | Allocations: 5249)
Completed 200 OK in 135ms (Views: 128.4ms | ActiveRecord: 0.0ms | Allocations: 7986)


Started POST "/graphql" for ::1 at 2022-03-29 17:08:32 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery", "graphql"=>{"query"=>"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ", "operationName"=>"IntrospectionQuery"}}
Completed 200 OK in 99ms (Views: 6.6ms | ActiveRecord: 0.0ms | Allocations: 24398)


Started POST "/graphql" for ::1 at 2022-03-29 17:08:34 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  # allProducts {\n  #   id,\n  #   title,\n  #   price,\n  #   description,\n  #   imageUrl,\n  #   country,\n  #   material,\n  #   quantity\n  # }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.8ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Completed 200 OK in 47ms (Views: 0.4ms | ActiveRecord: 10.5ms | Allocations: 9563)


Started POST "/graphql" for ::1 at 2022-03-29 17:08:40 +0100
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    imageUrl,\n    country,\n    material,\n    quantity\n  }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil, "graphql"=>{"query"=>"\n# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#     Merge Query:  Shift-Ctrl-M (or press the merge button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\nquery {\n  allProducts {\n    id,\n    title,\n    price,\n    description,\n    imageUrl,\n    country,\n    material,\n    quantity\n  }\n  \n  product(id: 5) {\n    id,\n    title,\n    price,\n    description\n  }\n}", "variables"=>nil}}
  [1m[36mProduct Load (0.8ms)[0m  [1m[34mSELECT "products".* FROM "products"[0m
  [1m[36mProduct Load (0.6ms)[0m  [1m[34mSELECT "products".* FROM "products" WHERE "products"."id" = $1 LIMIT $2[0m  [["id", 5], ["LIMIT", 1]]
  ↳ app/graphql/types/query_type.rb:21:in `product'
Completed 200 OK in 22ms (Views: 1.2ms | ActiveRecord: 1.4ms | Allocations: 2984)


